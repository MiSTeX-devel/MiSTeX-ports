#!/bin/bash
# Do not accept errors:
set -e

function is_dirty {
    git status --short | grep -i "^ M " > /dev/null
}

if [ -z "$JTFRAME" ]; then
    echo "ERROR $JTFRAME must be defined"
    exit 1
fi

cd $JTFRAME
# Merges changes from wip branch into master
LAST=`latest.sh`
LAST=${LAST:1}
EDITS="edits_$LAST"

WIP=`git branch --show-current`

M=`echo $LAST|cut -d . -f 1`
F=`echo $LAST|cut -d . -f 2`
P=`echo $LAST|cut -d . -f 3`

NEXT=
case "$1" in
    --abort)
        if [ `git branch --show-current` = master ]; then
            echo "Already in master branch. Nothing done"
            exit 0
        fi
        if is_dirty; then
            echo "Changes detected. Stash them [y/n/c]?"
            read CONT
            case "$CONT" in
                y) git stash;;
                n) git reset --hard;;
                c) echo "Cancelled"; exit 0;;
                *) echo "Reply y(es) n(o) or c(ancel)."; exit 1;;
            esac
        fi
        # EDIT_COMMIT=`git rev-parse --short HEAD`
        git checkout master
        git reset --hard
        git branch -d $EDITS || echo "It's advised to either merge, delete or rename the $EDITS branch"
        exit 0;;
    -e|--edit)
        if (git branch --show-current | grep edits); then
            echo "Already in an edit branch"
            exit 0
        fi
        STASHED=0
        if is_dirty; then git stash; STASHED=1; fi
        # Make sure we edit on top of the latest commit
        git checkout master
        git pull --recurse-submodules
        git checkout -b $EDITS
        if [ $STASHED = 1 ]; then git stash apply; fi
        exit 0;;
    -p|--patch)
        NEXT=v${M}.${F}.$((P+1));;
    -f|--feature)
        NEXT=v${M}.$((F+1)).0;;
    -m|--major)
        NEXT=v$((M+1)).0.0;;
    -v|--version)
        echo v$LAST
        exit 0;;
    ""|-h|--help)
        cat<<EOF
jtmerge merges a feature branch into the master branch and advances the version number

         --abort   Aborts the current edit operation
    -e | --edit    Creates a branch for new edits called edits_$LAST
    -v | --version Shows the current version

    -m | --major   Advances the major number and sets the rest to zero
    -f | --feature Advances the feature number and sets the patch to zero
    -p | --patch   Advances the patch number (third digit)

You must specify at least one argument. If the editing branch matches the
name edits_$LAST, it will be deleted after the merge
EOF
        exit 0
        ;;
    *)
        echo "Unknown argument $1"
        exit 1;;
esac

if [ $WIP = master ]; then
    echo "Call jtmerge from the feature branch."
    exit 1
fi

if is_dirty; then
    echo "Commit your changes before attempting a merge"
    exit 1
fi

git checkout master
git pull
git merge $WIP
git push
git tag $NEXT
git push --tags


if git branch -a | grep -q $EDITS; then
    git branch -d $EDITS
else
    git checkout $WIP
fi