#!/bin/bash
# This file is part of JTFRAME.
# JTFRAME program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# JTFRAME program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with JTFRAME.  If not, see <http://www.gnu.org/licenses/>.

# Author: Jose Tejada Gomez. Twitter: @topapate
# Version: 1.0
# Date: 12-1-2023

set -e

function show_usage() {
    cat << EOF
JTBETA Beta release preparation. (c) Jose Tejada 2021, @topapate

    jtbeta core [options for jtupdate]
    JTUTIL must point to the JTUTIL repository

    Beta preparation:

    -If a patrons/msg file exist, it must have been modified since the
     last beta tag
    -The builds.log file is reset off git
    -The jtupdate script is run with the added options:
        * --all
        * --seed
    -If all compilations are succesful:
        * commit the builds.log
        * tag the commit as "beta_core_month_day"

    The output files will be available in the $JTROOT/releases folder

    See also: cpmra2bin to copy the MRA files from a folder to JTBIN in the
    right way
EOF
}

# Check arguments
if [ $# -lt 1 ]; then
    show_usage
    exit 1
fi

if [ ! -d "$JTUTIL" ]; then
    echo "You need to export the environment variable JTUTIL pointing to the JTFPGA/JTUTIL repository"
    exit 1
fi

CORESTAMP=$(date --date=friday +"%Y%m%d")

for CORE in $*; do
    if [ ${CORE:0:1} = - ]; then break; fi
    BETACORES="$BETACORES $CORE"
    if [ ! -d $CORES/$CORE ]; then
        echo "Unknown core $CORE"
        exit 1
    fi
    # Check whether the patrons/msg file has been updated
    if [ -e $CORES/$CORE/patrons/msg ]; then
        MSGFILE=$CORES/$CORE/patrons/msg
        for REV in $(git tag | grep beta_$CORE); do
            if [ $(git diff $REV -- $MSGFILE|wc -l) = 0 ]; then
                echo "The msg file $MSGFILE has not changed since tag $REV"
                echo "Continue y/n?"
                read CONT
                if [ $CONT != y ]; then exit 1; fi
            fi
        done
    fi
done

MASTER_COMMIT=$(git rev-parse master)
if [ $? != 0 ]; then
    echo The beta must be done on the master branch
    exit 1
fi

if (git status --short | grep -i "^ M " > /dev/null); then
    echo "the git repository is not clean. Commit the changes before runing jtbeta"
    exit 1
fi

if ! version_ok.sh > /dev/null; then
    echo "Missing version tag"
    exit $?
fi

# If the release folder exists, it may be better to delete it
KEEP=
if [ -d $JTROOT/release ]; then
    cat <<EOF
The release folder exists. It is recommended to start from
a clean folder.
Delete it y/n?
EOF
    read CONT
    if [ $CONT = y ]; then rm -rf $JTROOT/{release,rom}; else KEEP="--keep"; fi
fi

# Beta keys are kept in $JTUTIL/beta.bin
if [ ! -s $JTUTIL/beta.bin ]; then
    echo "Missing $JTUTIL/beta.bin"
    exit 1
fi

# get $BETAKEY from beta.bin
BETAKEY=$(xxd -p -l 4 $JTUTIL/beta.bin)
export BETAKEY=$(printf "%d" "0x$BETAKEY")
zip --junk-paths $JTUTIL/jtbeta.zip $JTUTIL/beta.bin
# generate the jtbeta.zip file
# update the beta key in GitHub
if which gh; then
    gh secret set BETAKEY -b $BETAKEY
else
    echo "Warning: GitHub BETAKEY secret not updated"
    echo "Install github CLI for automatic update of GitHub secrets"
fi

jtupdate $BETACORES --seed --corestamp $CORESTAMP $KEEP $* || exit $?

echo -e "\n****** COMPILATION COMPLETE *********\n"

# Tag both code and JTBIN repositories
cd $JTROOT
# The MiSTer is the only one added to JTBIN
TAG="jtfriday_${CORESTAMP}"
git tag --force $TAG
git push --tags --force

cd $JTROOT/release
cp -r mister mra pocket $JTBIN
cat version.log >> $JTBIN/version.log
cd $JTBIN
git add *
git commit -m "JTFriday "$(date --date=friday +"%Y-%m-%d")
git tag --force $TAG

# Prepare the zip files
echo "Creating zip files"
cpbeta.sh

# Show problems
BETALOG=$JTROOT/log/update.log
if grep FAIL $BETALOG; then
    echo "Warning: Not all targets compiled correctly"
    exit 1
fi