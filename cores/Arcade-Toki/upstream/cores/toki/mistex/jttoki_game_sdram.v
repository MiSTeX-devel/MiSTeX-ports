// jttoki_game_sdram.v is automatically generated by JTFRAME
// Do not modify it
// Do not add it to git

`ifndef JTFRAME_COLORW
`define JTFRAME_COLORW 4
`endif

`ifndef JTFRAME_BUTTONS
`define JTFRAME_BUTTONS 2
`endif

module jttoki_game_sdram(
    `include "jtframe_common_ports.inc"
    `include "jtframe_mem_ports.inc"
);

/* verilator lint_off WIDTH */
localparam [25:0] BA1_START  =`ifdef JTFRAME_BA1_START  `JTFRAME_BA1_START  `else 26'd0 `endif;
localparam [25:0] BA2_START  =`ifdef JTFRAME_BA2_START  `JTFRAME_BA2_START  `else 26'd0 `endif;
localparam [25:0] BA3_START  =`ifdef JTFRAME_BA3_START  `JTFRAME_BA3_START  `else 26'd0 `endif;
localparam [25:0] PROM_START =`ifdef JTFRAME_PROM_START `JTFRAME_PROM_START `else 26'd0 `endif;
localparam [25:0] HEADER_LEN =`ifdef JTFRAME_HEADER     `JTFRAME_HEADER     `else 26'd0 `endif;
/* verilator lint_on WIDTH */


parameter GFX_1_OFFSET = 22'h30000;
parameter GFX_2_OFFSET = 22'h40000;
parameter GFX_3_OFFSET = 22'hc0000;
parameter GFX_4_OFFSET = 22'h100000;
parameter BANK_OFFSET = 22'h1000;
parameter OKI_OFFSET = 22'h9000;

`ifndef JTFRAME_IOCTL_RD
wire ioctl_ram = 0;
`endif
// Additional ports

// BRAM buses
// SDRAM buses

wire [18:1] cpu_rom_addr;
wire [15:0] cpu_rom_data;
wire        cpu_rom_cs, cpu_rom_ok;
wire [16:1] gfx1_rom_addr;
wire [15:0] gfx1_rom_data;
wire        gfx1_rom_cs, gfx1_rom_ok;
wire [19:1] gfx2_rom_addr;
wire [15:0] gfx2_rom_data;
wire        gfx2_rom_cs, gfx2_rom_ok;
wire [18:1] gfx3_rom_addr;
wire [15:0] gfx3_rom_data;
wire        gfx3_rom_cs, gfx3_rom_ok;
wire [18:1] gfx4_rom_addr;
wire [15:0] gfx4_rom_data;
wire        gfx4_rom_cs, gfx4_rom_ok;
wire [12:0] z80_rom_addr;
wire [ 7:0] z80_rom_data;
wire        z80_rom_cs, z80_rom_ok;
wire [15:0] bank_rom_addr;
wire [ 7:0] bank_rom_data;
wire        bank_rom_cs, bank_rom_ok;
wire [16:0] pcm_rom_addr;
wire [ 7:0] pcm_rom_data;
wire        pcm_rom_cs, pcm_rom_ok;
wire        prom_we, header;
wire [21:0] raw_addr, post_addr;
wire [25:0] pre_addr, dwnld_addr, ioctl_addr_noheader;
wire [ 7:0] post_data;
wire [15:0] raw_data;
wire        pass_io;
// Clock enable signals
wire oki_cen; 
wire gfx8_en, gfx16_en, ioctl_dwn;

assign pass_io = header | ioctl_ram;
assign ioctl_addr_noheader = `ifdef JTFRAME_HEADER header ? ioctl_addr : ioctl_addr - HEADER_LEN `else ioctl_addr `endif ;

wire rst_h, rst24_h, rst48_h, hold_rst;

jtframe_rsthold u_hold(
    .rst    ( rst       ),
    .clk    ( clk       ),
    .hold   ( hold_rst  ),
    .rst_h  ( rst_h     )
`ifdef JTFRAME_CLK24 ,
    .rst24  ( rst24     ),
    .clk24  ( clk24     ),
    .rst24_h( rst24_h   )
`endif
`ifdef JTFRAME_CLK48 ,
    .rst48  ( rst48     ),
    .clk48  ( clk48     ),
    .rst48_h( rst48_h   )
`endif
);

jttoki_game u_game(
    .rst        ( rst_h     ),
    .clk        ( clk       ),
`ifdef JTFRAME_CLK24
    .rst24      ( rst24_h   ),
    .clk24      ( clk24     ),
`endif
`ifdef JTFRAME_CLK48
    .rst48      ( rst48_h   ),
    .clk48      ( clk48     ),
`endif
    .oki_cen    ( oki_cen    ), 

    .pxl2_cen       ( pxl2_cen      ),
    .pxl_cen        ( pxl_cen       ),
    .red            ( red           ),
    .green          ( green         ),
    .blue           ( blue          ),
    .LHBL           ( LHBL          ),
    .LVBL           ( LVBL          ),
    .HS             ( HS            ),
    .VS             ( VS            ),
    // cabinet I/O
    .cab_1p   ( cab_1p  ),
    .coin     ( coin    ),
    .joystick1      ( joystick1     ),
    .joystick2      ( joystick2     ),
    `ifdef JTFRAME_4PLAYERS
    .joystick3      ( joystick3     ),
    .joystick4      ( joystick4     ),
    `endif
`ifdef JTFRAME_ANALOG
    .joyana_l1    ( joyana_l1        ),
    .joyana_l2    ( joyana_l2        ),
    `ifdef JTFRAME_ANALOG_DUAL
        .joyana_r1    ( joyana_r1        ),
        .joyana_r2    ( joyana_r2        ),
    `endif
    `ifdef JTFRAME_4PLAYERS
        .joyana_l3( joyana_l3        ),
        .joyana_l4( joyana_l4        ),
        `ifdef JTFRAME_ANALOG_DUAL
            .joyana_r3( joyana_r3        ),
            .joyana_r4( joyana_r4        ),
        `endif
    `endif
`endif
`ifdef JTFRAME_DIAL
    .dial_x         ( dial_x        ),
    .dial_y         ( dial_y        ),
`endif
    // DIP switches
    .status         ( status        ),
    .dipsw          ( dipsw         ),
    .service        ( service       ),
    .tilt           ( tilt          ),
    .dip_pause      ( dip_pause     ),
    .dip_flip       ( dip_flip      ),
    .dip_test       ( dip_test      ),
    .dip_fxlevel    ( dip_fxlevel   ),
    // Sound output
`ifdef JTFRAME_STEREO
    .snd_left       ( snd_left      ),
    .snd_right      ( snd_right     ),
`else
    .snd            ( snd           ),
`endif
    .sample         ( sample        ),
    .game_led       ( game_led      ),
    .enable_psg     ( enable_psg    ),
    .enable_fm      ( enable_fm     ),
    // Ports declared in mem.yaml
    // Memory interface - SDRAM
    .cpu_rom_addr ( cpu_rom_addr ),
    .cpu_rom_cs   ( cpu_rom_cs   ),
    .cpu_rom_ok   ( cpu_rom_ok   ),
    .cpu_rom_data ( cpu_rom_data ),
    
    .gfx1_rom_addr ( gfx1_rom_addr ),
    .gfx1_rom_cs   ( gfx1_rom_cs   ),
    .gfx1_rom_ok   ( gfx1_rom_ok   ),
    .gfx1_rom_data ( gfx1_rom_data ),
    
    .gfx2_rom_addr ( gfx2_rom_addr ),
    .gfx2_rom_cs   ( gfx2_rom_cs   ),
    .gfx2_rom_ok   ( gfx2_rom_ok   ),
    .gfx2_rom_data ( gfx2_rom_data ),
    
    .gfx3_rom_addr ( gfx3_rom_addr ),
    .gfx3_rom_cs   ( gfx3_rom_cs   ),
    .gfx3_rom_ok   ( gfx3_rom_ok   ),
    .gfx3_rom_data ( gfx3_rom_data ),
    
    .gfx4_rom_addr ( gfx4_rom_addr ),
    .gfx4_rom_cs   ( gfx4_rom_cs   ),
    .gfx4_rom_ok   ( gfx4_rom_ok   ),
    .gfx4_rom_data ( gfx4_rom_data ),
    
    .z80_rom_addr ( z80_rom_addr ),
    .z80_rom_cs   ( z80_rom_cs   ),
    .z80_rom_ok   ( z80_rom_ok   ),
    .z80_rom_data ( z80_rom_data ),
    
    .bank_rom_addr ( bank_rom_addr ),
    .bank_rom_cs   ( bank_rom_cs   ),
    .bank_rom_ok   ( bank_rom_ok   ),
    .bank_rom_data ( bank_rom_data ),
    
    .pcm_rom_addr ( pcm_rom_addr ),
    .pcm_rom_cs   ( pcm_rom_cs   ),
    .pcm_rom_ok   ( pcm_rom_ok   ),
    .pcm_rom_data ( pcm_rom_data ),
    
    // Memory interface - BRAM

    // PROM writting
    .ioctl_addr   ( pass_io ? ioctl_addr       : ioctl_addr_noheader  ),
    .prog_addr    ( pass_io ? ioctl_addr[21:0] : raw_addr      ),
    .prog_data    ( pass_io ? ioctl_dout       : raw_data[7:0] ),
    .prog_we      ( pass_io ? ioctl_wr         : prog_we       ),
    .prog_ba      ( prog_ba        ), // prog_ba supplied in case it helps re-mapping addresses
`ifdef JTFRAME_PROM_START
    .prom_we      ( prom_we        ),
`endif
`ifdef JTFRAME_HEADER
    .header       ( header         ),
`endif
`ifdef JTFRAME_IOCTL_RD
    .ioctl_ram    ( ioctl_ram      ),
    .ioctl_din    ( ioctl_din      ),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ), `endif
    .ioctl_cart   ( ioctl_cart     ),
    // Debug
    .debug_bus    ( debug_bus      ),
    .debug_view   ( debug_view     ),
`ifdef JTFRAME_STATUS
    .st_addr      ( st_addr        ),
    .st_dout      ( st_dout        ),
`endif
`ifdef JTFRAME_LF_BUFFER
    .game_vrender( game_vrender  ),
    .game_hdump  ( game_hdump    ),
    .ln_addr     ( ln_addr       ),
    .ln_data     ( ln_data       ),
    .ln_done     ( ln_done       ),
    .ln_hs       ( ln_hs         ),
    .ln_pxl      ( ln_pxl        ),
    .ln_v        ( ln_v          ),
    .ln_we       ( ln_we         ),
`endif
    .gfx_en      ( gfx_en        )
);

assign dwnld_busy = ioctl_rom | prom_we; // prom_we is really just for sims
assign dwnld_addr = ioctl_addr;
assign prog_addr = raw_addr;
assign prog_data = raw_data;
assign gfx8_en   = 0;
assign gfx16_en  = 0;
assign ioctl_dwn = ioctl_rom | ioctl_cart;
`ifdef VERILATOR_KEEP_SDRAM /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_dwnld #(
`ifdef JTFRAME_HEADER
    .HEADER    ( `JTFRAME_HEADER   ),
`endif
`ifdef JTFRAME_BA1_START
    .BA1_START ( BA1_START ),
`endif
`ifdef JTFRAME_BA2_START
    .BA2_START ( BA2_START ),
`endif
`ifdef JTFRAME_BA3_START
    .BA3_START ( BA3_START ),
`endif
`ifdef JTFRAME_PROM_START
    .PROM_START( PROM_START ),
`endif
    .SWAB      ( 1),
    .GFX8B0    ( 0),
    .GFX16B0   ( 0)
) u_dwnld(
    .clk          ( clk            ),
    .ioctl_rom    ( ioctl_dwn      ),
    .ioctl_addr   ( dwnld_addr     ),
    .ioctl_dout   ( ioctl_dout     ),
    .ioctl_wr     ( ioctl_wr       ),
    .gfx8_en      ( gfx8_en        ),
    .gfx16_en     ( gfx16_en       ),
    .prog_addr    ( raw_addr       ),
    .prog_data    ( raw_data       ),
    .prog_mask    ( prog_mask      ), // active low
    .prog_we      ( prog_we        ),
    .prog_rd      ( prog_rd        ),
    .prog_ba      ( prog_ba        ),
    .prom_we      ( prom_we        ),
    .header       ( header         ),
    .sdram_ack    ( prog_ack       )
);
`ifdef VERILATOR_KEEP_SDRAM /* verilator tracing_on */ `else /* verilator tracing_off */ `endif



jtframe_rom_5slots #(
    // cpu_rom
    .SLOT0_AW(18),
    .SLOT0_DW(16), 
    // gfx1_rom
    .SLOT1_OFFSET(GFX_1_OFFSET[21:0]),
    .SLOT1_AW(16),
    .SLOT1_DW(16), 
    // gfx2_rom
    .SLOT2_OFFSET(GFX_2_OFFSET[21:0]),
    .SLOT2_AW(19),
    .SLOT2_DW(16), 
    // gfx3_rom
    .SLOT3_OFFSET(GFX_3_OFFSET[21:0]),
    .SLOT3_AW(18),
    .SLOT3_DW(16), 
    // gfx4_rom
    .SLOT4_OFFSET(GFX_4_OFFSET[21:0]),
    .SLOT4_AW(18),
    .SLOT4_DW(16)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
    ,.SLOT1_DOUBLE(1)
    ,.SLOT2_DOUBLE(1)
    ,.SLOT3_DOUBLE(1)
    ,.SLOT4_DOUBLE(1)
`endif
) u_bank0(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( cpu_rom_addr  ),
    .slot0_dout  ( cpu_rom_data  ),
    .slot0_cs    ( cpu_rom_cs    ),
    .slot0_ok    ( cpu_rom_ok    ),
    
    .slot1_addr  ( gfx1_rom_addr  ),
    .slot1_dout  ( gfx1_rom_data  ),
    .slot1_cs    ( gfx1_rom_cs    ),
    .slot1_ok    ( gfx1_rom_ok    ),
    
    .slot2_addr  ( gfx2_rom_addr  ),
    .slot2_dout  ( gfx2_rom_data  ),
    .slot2_cs    ( gfx2_rom_cs    ),
    .slot2_ok    ( gfx2_rom_ok    ),
    
    .slot3_addr  ( gfx3_rom_addr  ),
    .slot3_dout  ( gfx3_rom_data  ),
    .slot3_cs    ( gfx3_rom_cs    ),
    .slot3_ok    ( gfx3_rom_ok    ),
    
    .slot4_addr  ( gfx4_rom_addr  ),
    .slot4_dout  ( gfx4_rom_data  ),
    .slot4_cs    ( gfx4_rom_cs    ),
    .slot4_ok    ( gfx4_rom_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[0]  ),
    .sdram_rd    ( ba_rd[0]   ),
    .sdram_addr  ( ba0_addr   ),
    .data_dst    ( ba_dst[0]  ),
    .data_rdy    ( ba_rdy[0]  ),
    .data_read   ( data_read  )
);
assign ba_wr[0] = 0;
assign ba0_din  = 0;
assign ba0_dsn  = 3;
jtframe_rom_3slots #(
    // z80_rom
    .SLOT0_AW(13),
    .SLOT0_DW( 8), 
    // bank_rom
    .SLOT1_OFFSET(BANK_OFFSET[21:0]),
    .SLOT1_AW(16),
    .SLOT1_DW( 8), 
    // pcm_rom
    .SLOT2_OFFSET(OKI_OFFSET[21:0]),
    .SLOT2_AW(17),
    .SLOT2_DW( 8)
`ifdef JTFRAME_BA2_LEN
    ,.SLOT0_DOUBLE(1)
    ,.SLOT1_DOUBLE(1)
    ,.SLOT2_DOUBLE(1)
`endif
) u_bank1(
    .rst         ( rst        ),
    .clk         ( clk        ),
    
    .slot0_addr  ( z80_rom_addr  ),
    .slot0_dout  ( z80_rom_data  ),
    .slot0_cs    ( z80_rom_cs    ),
    .slot0_ok    ( z80_rom_ok    ),
    
    .slot1_addr  ( bank_rom_addr  ),
    .slot1_dout  ( bank_rom_data  ),
    .slot1_cs    ( bank_rom_cs    ),
    .slot1_ok    ( bank_rom_ok    ),
    
    .slot2_addr  ( pcm_rom_addr  ),
    .slot2_dout  ( pcm_rom_data  ),
    .slot2_cs    ( pcm_rom_cs    ),
    .slot2_ok    ( pcm_rom_ok    ),
    
    // SDRAM controller interface
    .sdram_ack   ( ba_ack[1]  ),
    .sdram_rd    ( ba_rd[1]   ),
    .sdram_addr  ( ba1_addr   ),
    .data_dst    ( ba_dst[1]  ),
    .data_rdy    ( ba_rdy[1]  ),
    .data_read   ( data_read  )
);
assign ba_wr[1] = 0;
assign ba1_din  = 0;
assign ba1_dsn  = 3;
assign hold_rst=0;
assign ba2_addr = 0;
assign ba_rd[2] = 0;
assign ba_wr[2] = 0;
assign ba2_dsn  = 3;
assign ba2_din  = 0;
assign ba3_addr = 0;
assign ba_rd[3] = 0;
assign ba_wr[3] = 0;
assign ba3_dsn  = 3;
assign ba3_din  = 0;



// Clock enable generation
// 1000000 = 48000000*1/48 Hz from clk48
`ifdef VERILATOR_KEEP_CEN /* verilator tracing_on */ `else /* verilator tracing_off */ `endif
jtframe_gated_cen #(.W(1),.NUM(1),.DEN(48),.MFREQ(48000)) u_cen0_clk48(
    .rst    ( rst          ),
    .clk    ( clk48 ),
    .busy   ( 1'b0    ),
    .cen    ( { oki_cen } ),
    .fave   (              ),
    .fworst (              )
);


endmodule
